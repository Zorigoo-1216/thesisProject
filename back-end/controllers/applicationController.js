const applicationService = require('../services/applicationService');
const Jobdb = require('../dataAccess/jobDB');
// –ê–∂–∏–ª–¥ —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Ö
// controllers/applicationController.js
const applyToJob = async (req, res) => {
  try {
    const userId = req.user?.id || req.body.userId;
    const { jobId } = req.body;

    if (!userId) return res.status(400).json({ success: false, message: "User ID required" });
    if (!jobId) return res.status(400).json({ success: false, message: "Job ID required" });

    const result = await applicationService.applyToJob(userId, jobId);

    if (result.success) {
      return res.status(200).json(result);
    }

    return res.status(400).json(result);
  } catch (err) {
    console.error("‚ùå ApplyToJob Error:", err.message);
    return res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};


const cancelApplication = async (req, res) => {
  try {
    const userId = req.user?.id || req.body.userId;
    const jobId = req.params.id || req.body.jobId;

    if (!userId || !jobId) {
      return res.status(400).json({ success: false, message: "User ID and Job ID are required" });
    }

    const result = await applicationService.cancelApplication(userId, jobId);

    if (result.success) {
      return res.status(200).json(result);
    }

    return res.status(400).json(result);
  } catch (err) {
    console.error("‚ùå CancelApplication Error:", err.message);
    return res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};


// —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω –∞–∂–ª—É—É–¥
const getMyAppliedJobs = async (req, res) => {
  try {
    const userId = req.user?.id || req.body.userId;
    const status = req.query.status || req.body.status || null;

    if (!userId) {
      return res.status(400).json({ success: false, message: "User ID required" });
    }
    //console.log("üì• /getMyAppliedJobs GET - userId:", userId);
    const result = await applicationService.getMyAppliedJobs(userId, status);

    if (result.success) {
     // console.log("üì• /getMyAppliedJobs GET - result:", result);
      return res.status(200).json(result);
    }
    
    return res.status(400).json(result);
  } catch (err) {
    console.error("‚ùå GetMyAppliedJobs Error:", err.message);
    return res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};


// –ú–∏–Ω–∏–π –±“Ø—Ö —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω –∞–∂–ª—ã–Ω —Ç“Ø“Ø—Ö
const getMyAllAppliedJobs = async (req, res) => {
  try {
    const userId = req.user?.id || req.body.userId;

    if (!userId) {
      return res.status(400).json({ success: false, message: "User ID required" });
    }

    const result = await applicationService.getMyAllAppliedJobs(userId);

    if (result.success) {
      return res.status(200).json(result);
    }

    return res.status(400).json(result);
  } catch (err) {
    console.error("‚ùå GetMyAllAppliedJobs Error:", err.message);
    return res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};

// –ê–∂–∏–ª–¥ —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç—Å—ç–Ω –∞–∂–∏–ª—á–∏–¥
const getAppliedUsersByJob = async (req, res) => {
  try {
    const jobId = req.params.id || req.body.jobId;

    if (!jobId) {
      return res.status(400).json({ success: false, message: "Job ID required" });
    }

    const result = await applicationService.getAppliedUsersByJob(jobId);

    if (result.success) {
      return res.status(200).json(result);
    }

    return res.status(400).json(result);
  } catch (err) {
    console.error("‚ùå GetAppliedUsersByJob Error:", err.message);
    return res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};


const getInterviewsByJob = async (req, res) => {
  try {
    const jobId = req.params.id || req.body.jobId;
    if (!jobId) return res.status(400).json({ error: "Job ID required" });

    const interviews = await applicationService.getInterviewsByJob(jobId);
    res.status(200).json({ message: "–ê–º–∂–∏–ª—Ç—Ç–∞–π", interviews : interviews || [] });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
}
// –∞–∂–∏–ª—Ç–∞–Ω —Å–æ–Ω–≥–æ—Ö
const selectCandidates = async (req, res) => {
  try {
    const jobId = req.params.id || req.body.jobId;
    const { selectedUserIds } = req.body;

    if (!jobId) {
      return res.status(400).json({ success: false, message: "Job ID required" });
    }

    const result = await applicationService.selectCandidates(jobId, selectedUserIds);

    if (result.success) {
      return res.status(200).json(result);
    }

    return res.status(400).json(result);
  } catch (err) {
    console.error("‚ùå SelectCandidates Error:", err.message);
    return res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};


// ‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é–¥ –æ—Ä–æ–ª—Ü–æ—Ö –∞–∂–∏–ª—á–¥—ã–≥ —Å–æ–Ω–≥–æ—Ö
const selectCandidatesfromInterview = async (req, res) => {
  try {
    const jobId = req.params.id || req.body.jobId;
    const { selectedUserIds } = req.body;

    if (!jobId) {
      return res.status(400).json({ success: false, message: "Job ID required" });
    }

    const result = await applicationService.selectCandidatesfromInterview(jobId, selectedUserIds);

    if (result.success) {
      return res.status(200).json(result);
    }

    return res.status(400).json(result);
  } catch (err) {
    console.error("‚ùå SelectCandidatesFromInterview Error:", err.message);
    return res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};
const getEmployeesByJob = async (req, res) => {
  try {
    const jobId = req.params.id || req.body.jobId;
    if (!jobId) return res.status(400).json({ error: "Job ID required" });
    //console.log("üì• /get employees GET - jobId:", jobId);
    const employers = await applicationService.getEmployeesByJob(jobId);
    //console.log("üì• /get employees GET - employers:", employers);
    res.status(200).json({ message: "–ê–º–∂–∏–ª—Ç—Ç–∞–π", employers });
}
catch (err) {
  res.status(400).json({ error: err.message });
}
}

const getCandidatesByJob = async (req, res) => {
  try {
    const jobId = req.params.id || req.body.jobId;
    if (!jobId) return res.status(400).json({ error: "Job ID required" });
    const candidates = await applicationService.getCandidatesByJob(jobId);
    res.status(200).json({ message: "–ê–º–∂–∏–ª—Ç—Ç–∞–π", candidates : candidates || [] });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
}

// const selectCandidateForContract = async (req, res) => {
//   try {
//     const jobId = req.params.id || req.body.jobId;
//     const { selectedUserIds } = req.body;

//     if (!jobId) return res.status(400).json({ error: "Job ID required" });
//     const result = await applicationService.selectCandidateForContract(jobId, selectedUserIds);
//     res.status(200).json({ message: "–ê–º–∂–∏–ª—Ç—Ç–∞–π", result });
//   } catch (err) {
//     res.status(400).json({ error: err.message });
//   }
//}
module.exports = {
  applyToJob,
  getMyAppliedJobs,
  getMyAllAppliedJobs,
  getAppliedUsersByJob,
  selectCandidates,
  selectCandidatesfromInterview,
  getInterviewsByJob,
  getEmployeesByJob,
  getCandidatesByJob,
  cancelApplication
};
