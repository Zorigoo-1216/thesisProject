const paymentService = require('../services/paymentService');

// 1. –ê–∂–∏–ª –æ–ª–≥–æ–≥—á —Ç—É—Ö–∞–π–Ω –∞–∂–ª—ã–Ω –±“Ø—Ö —Ç”©–ª–±”©—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞—Ä–∞—Ö
const viewPaymentInfoByJob = async (req, res) => {
  try {
    const { jobId } = req.params;
    const employerId = req.user.id;
    console.log('üì• /viewPaymentInfoByJob GET - jobId:', jobId);
    const result = await paymentService.getPaymentsByJob(jobId, employerId);
    if (!result.success) {
      return res.status(400).json({ success: false, message: result.message });
    }
    console.log('‚úÖ Payment info retrieved successfully:', result.data);
    res.status(200).json({ success: true, data: result.data });
  } catch (error) {
    console.error('‚ùå Error in viewPaymentInfoByJob:', error.message);
    res.status(500).json({ success: false, message: 'Internal Server Error' });
  }
};

// 2. –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ö —Ç”©–ª–±”©—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞—Ä–∞—Ö
const getUserPaymentInfo = async (req, res) => {
  const { userId } = req.params;
  const requesterId = req.user.id;
  const result = await paymentService.getPaymentsByUser(userId, requesterId);
  res.json(result);
};

// 3. –ù—ç–≥ —Ç”©–ª–±”©—Ä–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π–≥ —Ö–∞—Ä–∞—Ö (–∞–∂–∏–ª –æ–ª–≥–æ–≥—á –±–æ–ª–æ–Ω –∞–∂–∏–ª—Ç–∞–Ω –∞–ª—å –∞–ª—å –Ω—å –∞—à–∏–≥–ª–∞–∂ –±–æ–ª–Ω–æ)
const getPaymentDetail = async (req, res) => {
  const { paymentId } = req.params;
  const requesterId = req.user.id;
  const result = await paymentService.getPaymentDetail(paymentId, requesterId);
  res.json(result);
};

// 4. –ù—ç–≥ –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ü–∞–ª–∏–Ω —à–∏–ª–∂“Ø“Ø–ª—ç—Ö
const transferWorkerSalary = async (req, res) => {
  const { paymentId } = req.params;
  const employerId = req.user.id;
  const result = await paymentService.transferOneSalary(paymentId, employerId);
  res.json(result);
};

// 5. –û–ª–æ–Ω –∞–∂–∏–ª—Ç–∞–Ω–¥ –Ω—ç–≥ –¥–æ—Ä —Ü–∞–ª–∏–Ω —à–∏–ª–∂“Ø“Ø–ª—ç—Ö
const transferWorkersSalary = async (req, res) => {
  const { paymentIds } = req.body; // array of IDs
  const employerId = req.user.id;
  const result = await paymentService.transferMultipleSalaries(paymentIds, employerId);
  res.json(result);
};

// 6. –°—Ç–∞—Ç—É—Å—ã–≥ `paid` –±–æ–ª–≥–æ—Ö (—Ç–µ—Å—Ç —ç—Å–≤—ç–ª –∞–¥–º–∏–Ω –Ω”©—Ö—Ü”©–ª–¥)
const markAsPaid = async (req, res) => {
  const userId = req.user.id;
  const { paymentId } = req.params;
  const result = await paymentService.markPaymentAsPaid(paymentId, userId);
  res.json(result);
};

const viewPaymentInfoByJobAndUser = async (req, res) => {
  try{
    const userId = req.user.id;
    const { jobId } = req.params;
    const result = await paymentService.getPaymentsByJobAndUser(jobId, userId);
    console.log('‚úÖ Payment info retrieved successfully:', result);
    res.json(result);
  }
  catch (error) {
    console.error('‚ùå Error in viewPaymentInfoByJobAndUser:', error.message);
    res.status(500).json({ success: false, message: 'Internal Server Error' });
  }
};


module.exports = {
  viewPaymentInfoByJob,
  getUserPaymentInfo,
  getPaymentDetail,
  transferWorkerSalary,
  transferWorkersSalary,
  markAsPaid,
  viewPaymentInfoByJobAndUser
};
